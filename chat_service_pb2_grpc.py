# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chat_service_pb2 as chat__service__pb2


class ChatServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Alive = channel.unary_unary(
                '/chat.ChatService/Alive',
                request_serializer=chat__service__pb2.Empty.SerializeToString,
                response_deserializer=chat__service__pb2.ReviveInfo.FromString,
                )
        self.RequestHeartbeat = channel.unary_unary(
                '/chat.ChatService/RequestHeartbeat',
                request_serializer=chat__service__pb2.Empty.SerializeToString,
                response_deserializer=chat__service__pb2.HeartbeatResponse.FromString,
                )
        self.ProposeCommit = channel.unary_unary(
                '/chat.ChatService/ProposeCommit',
                request_serializer=chat__service__pb2.CommitRequest.SerializeToString,
                response_deserializer=chat__service__pb2.CommitVote.FromString,
                )
        self.SendVoteResult = channel.unary_unary(
                '/chat.ChatService/SendVoteResult',
                request_serializer=chat__service__pb2.CommitVote.SerializeToString,
                response_deserializer=chat__service__pb2.Empty.FromString,
                )
        self.Ping = channel.unary_unary(
                '/chat.ChatService/Ping',
                request_serializer=chat__service__pb2.Empty.SerializeToString,
                response_deserializer=chat__service__pb2.Empty.FromString,
                )
        self.Addition = channel.unary_unary(
                '/chat.ChatService/Addition',
                request_serializer=chat__service__pb2.TwoNumbers.SerializeToString,
                response_deserializer=chat__service__pb2.Sum.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/chat.ChatService/SendMessage',
                request_serializer=chat__service__pb2.SendRequest.SerializeToString,
                response_deserializer=chat__service__pb2.SendResponse.FromString,
                )
        self.ReceiveMessage = channel.unary_unary(
                '/chat.ChatService/ReceiveMessage',
                request_serializer=chat__service__pb2.User.SerializeToString,
                response_deserializer=chat__service__pb2.ChatMessage.FromString,
                )
        self.GetUsers = channel.unary_stream(
                '/chat.ChatService/GetUsers',
                request_serializer=chat__service__pb2.Empty.SerializeToString,
                response_deserializer=chat__service__pb2.User.FromString,
                )
        self.Login = channel.unary_unary(
                '/chat.ChatService/Login',
                request_serializer=chat__service__pb2.LoginRequest.SerializeToString,
                response_deserializer=chat__service__pb2.LoginResponse.FromString,
                )
        self.Register = channel.unary_unary(
                '/chat.ChatService/Register',
                request_serializer=chat__service__pb2.RegisterRequest.SerializeToString,
                response_deserializer=chat__service__pb2.RegisterResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/chat.ChatService/Delete',
                request_serializer=chat__service__pb2.DeleteRequest.SerializeToString,
                response_deserializer=chat__service__pb2.DeleteResponse.FromString,
                )


class ChatServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Alive(self, request, context):
        """Connection functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestHeartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProposeCommit(self, request, context):
        """Voting functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendVoteResult(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """Client functions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Addition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """-> Chat functionality
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """-> Auth functionality
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Alive': grpc.unary_unary_rpc_method_handler(
                    servicer.Alive,
                    request_deserializer=chat__service__pb2.Empty.FromString,
                    response_serializer=chat__service__pb2.ReviveInfo.SerializeToString,
            ),
            'RequestHeartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestHeartbeat,
                    request_deserializer=chat__service__pb2.Empty.FromString,
                    response_serializer=chat__service__pb2.HeartbeatResponse.SerializeToString,
            ),
            'ProposeCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.ProposeCommit,
                    request_deserializer=chat__service__pb2.CommitRequest.FromString,
                    response_serializer=chat__service__pb2.CommitVote.SerializeToString,
            ),
            'SendVoteResult': grpc.unary_unary_rpc_method_handler(
                    servicer.SendVoteResult,
                    request_deserializer=chat__service__pb2.CommitVote.FromString,
                    response_serializer=chat__service__pb2.Empty.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=chat__service__pb2.Empty.FromString,
                    response_serializer=chat__service__pb2.Empty.SerializeToString,
            ),
            'Addition': grpc.unary_unary_rpc_method_handler(
                    servicer.Addition,
                    request_deserializer=chat__service__pb2.TwoNumbers.FromString,
                    response_serializer=chat__service__pb2.Sum.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=chat__service__pb2.SendRequest.FromString,
                    response_serializer=chat__service__pb2.SendResponse.SerializeToString,
            ),
            'ReceiveMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ReceiveMessage,
                    request_deserializer=chat__service__pb2.User.FromString,
                    response_serializer=chat__service__pb2.ChatMessage.SerializeToString,
            ),
            'GetUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=chat__service__pb2.Empty.FromString,
                    response_serializer=chat__service__pb2.User.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=chat__service__pb2.LoginRequest.FromString,
                    response_serializer=chat__service__pb2.LoginResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=chat__service__pb2.RegisterRequest.FromString,
                    response_serializer=chat__service__pb2.RegisterResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=chat__service__pb2.DeleteRequest.FromString,
                    response_serializer=chat__service__pb2.DeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chat.ChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChatService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Alive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/Alive',
            chat__service__pb2.Empty.SerializeToString,
            chat__service__pb2.ReviveInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestHeartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/RequestHeartbeat',
            chat__service__pb2.Empty.SerializeToString,
            chat__service__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProposeCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/ProposeCommit',
            chat__service__pb2.CommitRequest.SerializeToString,
            chat__service__pb2.CommitVote.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendVoteResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/SendVoteResult',
            chat__service__pb2.CommitVote.SerializeToString,
            chat__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/Ping',
            chat__service__pb2.Empty.SerializeToString,
            chat__service__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Addition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/Addition',
            chat__service__pb2.TwoNumbers.SerializeToString,
            chat__service__pb2.Sum.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/SendMessage',
            chat__service__pb2.SendRequest.SerializeToString,
            chat__service__pb2.SendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/ReceiveMessage',
            chat__service__pb2.User.SerializeToString,
            chat__service__pb2.ChatMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/chat.ChatService/GetUsers',
            chat__service__pb2.Empty.SerializeToString,
            chat__service__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/Login',
            chat__service__pb2.LoginRequest.SerializeToString,
            chat__service__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/Register',
            chat__service__pb2.RegisterRequest.SerializeToString,
            chat__service__pb2.RegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chat.ChatService/Delete',
            chat__service__pb2.DeleteRequest.SerializeToString,
            chat__service__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
